function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
import cx from "clsx";
import Box from "@material-ui/core/Box";
import { generateUtilityClasses } from "@material-ui/unstyled";
import { checkFlexGap, halveGap } from "./utils";
export var flexClasses = generateUtilityClasses("Flex", ["row", "col", "item"]);
export var Item = (_ref) => {
  var {
    className,
    noShrink,
    grow
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "noShrink", "grow"]);

  return /*#__PURE__*/React.createElement(Box, _extends({
    className: cx(flexClasses.item, className),
    minWidth: "0px"
  }, noShrink && {
    flexShrink: 0
  }, props, grow && {
    flexGrow: grow === "stretched" ? 100000 : 1
  }));
};

var resolveGap = gap => {
  return checkFlexGap() ? {
    gap
  } : {
    m: halveGap(gap, true),
    "& > *, & > .MuiBox-root": {
      p: halveGap(gap)
    }
  };
};

export var FlexRow = (_ref2) => {
  var {
    className,
    gap,
    noWrap,
    stackPoint
  } = _ref2,
      props = _objectWithoutPropertiesLoose(_ref2, ["className", "gap", "noWrap", "stackPoint"]);

  var resolvedGap = resolveGap(gap);
  return /*#__PURE__*/React.createElement(Item, _extends({
    className: cx(flexClasses.row, className),
    minWidth: "0px"
  }, props, {
    sx: _extends({}, props.sx, {
      display: "flex",
      flexDirection: "row",
      flexWrap: noWrap ? "nowrap" : "wrap"
    }, resolvedGap, {
      "& > *, & > .MuiBox-root": _extends({}, resolvedGap["& > *, & > .MuiBox-root"], stackPoint && {
        minWidth: "clamp(0px, (".concat(typeof stackPoint === "number" ? "".concat(stackPoint, "px") : stackPoint, " + 1px - 100%) * 999, 100%)")
      })
    })
  }));
};
export var FlexCol = (_ref3) => {
  var {
    className,
    gap
  } = _ref3,
      props = _objectWithoutPropertiesLoose(_ref3, ["className", "gap"]);

  return /*#__PURE__*/React.createElement(Item, _extends({
    className: cx(flexClasses.col, className)
  }, props, {
    sx: _extends({}, props.sx, {
      display: "flex",
      flexDirection: "column"
    }, resolveGap(gap))
  }));
};
export var Flex = {
  Row: FlexRow,
  Col: FlexCol,
  Item: Item
};