{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const _options$theme = options.theme,\n        defaultTheme = _options$theme === void 0 ? {} : _options$theme,\n        _options$attribute = options.attribute,\n        defaultAttribute = _options$attribute === void 0 ? DEFAULT_ATTRIBUTE : _options$attribute,\n        _options$modeStorageK = options.modeStorageKey,\n        defaultModeStorageKey = _options$modeStorageK === void 0 ? DEFAULT_MODE_STORAGE_KEY : _options$modeStorageK,\n        _options$colorSchemeS = options.colorSchemeStorageKey,\n        defaultColorSchemeStorageKey = _options$colorSchemeS === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _options$colorSchemeS,\n        _options$defaultMode = options.defaultMode,\n        desisgnSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n        designSystemColorScheme = options.defaultColorScheme,\n        _options$disableTrans = options.disableTransitionOnChange,\n        designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n        _options$enableColorS = options.enableColorScheme,\n        designSystemEnableColorScheme = _options$enableColorS === void 0 ? true : _options$enableColorS,\n        designSystemShouldSkipGeneratingVar = options.shouldSkipGeneratingVar,\n        resolveTheme = options.resolveTheme;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    enableColorScheme = designSystemEnableColorScheme,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n  }) {\n    const hasMounted = React.useRef(false);\n\n    const _themeProp$colorSchem = themeProp.colorSchemes,\n          colorSchemes = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n          _themeProp$components = themeProp.components,\n          components = _themeProp$components === void 0 ? {} : _themeProp$components,\n          cssVarPrefix = themeProp.cssVarPrefix,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    const _useCurrentColorSchem = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    }),\n          mode = _useCurrentColorSchem.mode,\n          setMode = _useCurrentColorSchem.setMode,\n          systemMode = _useCurrentColorSchem.systemMode,\n          lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n          darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n          colorScheme = _useCurrentColorSchem.colorScheme,\n          setColorScheme = _useCurrentColorSchem.setColorScheme;\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    let theme = restThemeProp;\n\n    const _cssVarsParser = cssVarsParser(theme, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    }),\n          rootCss = _cssVarsParser.css,\n          rootVars = _cssVarsParser.vars,\n          parsedTheme = _cssVarsParser.parsedTheme;\n\n    theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => \"[\".concat(attribute, \"=\\\"\").concat(targetColorScheme, \"\\\"] &\")\n    });\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const _cssVarsParser2 = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      }),\n            css = _cssVarsParser2.css,\n            vars = _cssVarsParser2.vars,\n            parsedScheme = _cssVarsParser2.parsedTheme;\n\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === resolvedColorScheme) {\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          // assign runtime mode & colorScheme\n          theme.palette.mode = mode;\n          theme.palette.colorScheme = resolvedColorScheme;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        defaultColorSchemeStyleSheet[colorSchemeSelector] = css;\n      } else {\n        otherColorSchemesStyleSheet[\"\".concat(colorSchemeSelector === ':root' ? '' : colorSchemeSelector, \"[\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme || !colorSchemeNode) {\n        return undefined;\n      }\n\n      const priorColorScheme = colorSchemeNode.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        colorSchemeNode.style.setProperty('color-scheme', systemMode);\n      } else {\n        colorSchemeNode.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        colorSchemeNode.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme, colorSchemeNode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    modeStorageKey: defaultModeStorageKey,\n    enableColorScheme: designSystemEnableColorScheme\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["/Users/nanang/neo4J/tuas/web-react/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","unstable_useEnhancedEffect","useEnhancedEffect","GlobalStyles","cssVarsParser","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","desisgnSystemMode","designSystemColorScheme","defaultColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","enableColorScheme","designSystemEnableColorScheme","designSystemShouldSkipGeneratingVar","shouldSkipGeneratingVar","resolveTheme","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","hasMounted","useRef","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","resolvedColorScheme","prefix","rootCss","css","rootVars","vars","parsedTheme","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","parsedScheme","palette","resolvedDefaultColorScheme","useEffect","setAttribute","priorColorScheme","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","any","oneOfType","object","bool","func","getInitColorSchemeScript","params"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    enableColorScheme: designSystemEnableColorScheme = true,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    enableColorScheme = designSystemEnableColorScheme,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n  }) {\n    const hasMounted = React.useRef(false);\n\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    let theme = restThemeProp;\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(theme, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    });\n    theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === resolvedColorScheme) {\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          // assign runtime mode & colorScheme\n          theme.palette.mode = mode;\n          theme.palette.colorScheme = resolvedColorScheme;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        defaultColorSchemeStyleSheet[colorSchemeSelector] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme || !colorSchemeNode) {\n        return undefined;\n      }\n\n      const priorColorScheme = colorSchemeNode.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        colorSchemeNode.style.setProperty('color-scheme', systemMode);\n      } else {\n        colorSchemeNode.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        colorSchemeNode.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme, colorSchemeNode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    modeStorageKey: defaultModeStorageKey,\n    enableColorScheme: designSystemEnableColorScheme\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}