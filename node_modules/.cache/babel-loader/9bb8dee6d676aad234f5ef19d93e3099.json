{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/nanang/neo4J/tuas/web-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/nanang/neo4J/tuas/web-react/src/components/sna/user/TwitterUser.js\",\n    _templateObject,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { Grid, Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport { Divider as Pemisah } from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { FlexRow, FlexCol, Item } from '@mui-treasury/component-flex';\nimport Divider from '@material-ui/core/Divider';\nimport Link from '@material-ui/core/Link';\nimport PersonItem from '../PersonItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport { ChevronLeft as ChevronLeftIcon, Menu as MenuIcon, Dashboard as DashboardIcon, Assignment as AssignmentIcon, Twitter as TwitterIcon, MoreVert as MoreVertIcon, People as PeopleIcon } from '@material-ui/icons';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nconst GET_COUNT_TWEET_USER = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  {\\n    getTopUserWithCountTweet {\\n      id\\n      username\\n      screen_name\\n      name\\n      score\\n      profile_image_url\\n      countTweet\\n      user_id\\n    }\\n  }\\n\"])));\nimport { useQuery, useLazyQuery, gql } from '@apollo/client';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TwitterUser() {\n  _s();\n\n  const userCountTweet = useQuery(GET_COUNT_TWEET_USER);\n  console.log('userCountTweet');\n  console.log(userCountTweet.data);\n  if (userCountTweet.errors) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 37\n  }, this);\n  if (userCountTweet.loading) return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 38\n  }, this);\n  const userCountTweetArr = [...userCountTweet.data.getTopUserWithCountTweet].sort((a, b) => b.countTweet - a.countTweet);\n  const userCountTweetArr10 = userCountTweetArr.slice(0, 10);\n  return /*#__PURE__*/_jsxDEV(FlexCol, {\n    borderRadius: 2,\n    sx: {\n      bgcolor: 'rgb(244, 247, 250)',\n      boxShadow: '0 8px 16px 0 #BDC9D7'\n    },\n    children: [/*#__PURE__*/_jsxDEV(FlexRow, {\n      alignItems: \"baseline\",\n      p: 2,\n      sx: {\n        bgcolor: '#fff'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Item, {\n        grow: true,\n        mr: 1,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Most Active Users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Item, {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          href: \"#\",\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), \" \\u2022 \", /*#__PURE__*/_jsxDEV(Link, {\n          href: \"#\",\n          children: \"See all\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), userCountTweetArr10.map((tweet, index) => /*#__PURE__*/_jsxDEV(PersonItem, {\n      src: tweet.profile_image_url,\n      name: tweet.screen_name,\n      count: tweet.countTweet,\n      user_id: tweet.user_id\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TwitterUser, \"YQTQYVd2HTpohfv6ENOYe5gpdL8=\", false, function () {\n  return [useQuery];\n});\n\n_c = TwitterUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"TwitterUser\");","map":{"version":3,"sources":["/Users/nanang/neo4J/tuas/web-react/src/components/sna/user/TwitterUser.js"],"names":["React","useTheme","Grid","Paper","makeStyles","clsx","List","ListItem","Divider","Pemisah","ListItemText","ListItemAvatar","Avatar","Typography","Card","CardContent","CardHeader","FlexRow","FlexCol","Item","Link","PersonItem","IconButton","ChevronLeft","ChevronLeftIcon","Menu","MenuIcon","Dashboard","DashboardIcon","Assignment","AssignmentIcon","Twitter","TwitterIcon","MoreVert","MoreVertIcon","People","PeopleIcon","Table","TableBody","TableCell","TableHead","TableRow","Button","GET_COUNT_TWEET_USER","gql","useQuery","useLazyQuery","CircularProgress","TwitterUser","userCountTweet","console","log","data","errors","loading","userCountTweetArr","getTopUserWithCountTweet","sort","a","b","countTweet","userCountTweetArr10","slice","bgcolor","boxShadow","map","tweet","index","profile_image_url","screen_name","user_id"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useTheme } from '@material-ui/core/styles'\nimport { Grid, Paper } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\n\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport { Divider as Pemisah } from '@material-ui/core/Divider'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\nimport Avatar from '@material-ui/core/Avatar'\nimport Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardHeader from '@material-ui/core/CardHeader'\n\nimport { FlexRow, FlexCol, Item } from '@mui-treasury/component-flex'\nimport Divider from '@material-ui/core/Divider'\nimport Link from '@material-ui/core/Link'\nimport PersonItem from '../PersonItem'\n\nimport IconButton from '@material-ui/core/IconButton'\n\nimport {\n  ChevronLeft as ChevronLeftIcon,\n  Menu as MenuIcon,\n  Dashboard as DashboardIcon,\n  Assignment as AssignmentIcon,\n  Twitter as TwitterIcon,\n  MoreVert as MoreVertIcon,\n  People as PeopleIcon,\n} from '@material-ui/icons'\n\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Button from '@material-ui/core/Button'\n\nconst GET_COUNT_TWEET_USER = gql`\n  {\n    getTopUserWithCountTweet {\n      id\n      username\n      screen_name\n      name\n      score\n      profile_image_url\n      countTweet\n      user_id\n    }\n  }\n`\n\nimport { useQuery, useLazyQuery, gql } from '@apollo/client'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nexport default function TwitterUser() {\n  const userCountTweet = useQuery(GET_COUNT_TWEET_USER)\n\n  console.log('userCountTweet')\n  console.log(userCountTweet.data)\n\n  if (userCountTweet.errors) return <p>Error</p>\n  if (userCountTweet.loading) return <CircularProgress />\n\n  const userCountTweetArr = [\n    ...userCountTweet.data.getTopUserWithCountTweet,\n  ].sort((a, b) => b.countTweet - a.countTweet)\n\n  const userCountTweetArr10 = userCountTweetArr.slice(0, 10)\n\n  return (\n    <FlexCol\n      borderRadius={2}\n      sx={{\n        bgcolor: 'rgb(244, 247, 250)',\n        boxShadow: '0 8px 16px 0 #BDC9D7',\n      }}\n    >\n      <FlexRow\n        alignItems=\"baseline\"\n        p={2}\n        sx={{\n          bgcolor: '#fff',\n        }}\n      >\n        <Item grow mr={1}>\n          <Typography variant=\"h6\">\n            <b>Most Active Users</b>\n          </Typography>\n        </Item>\n        <Item>\n          <Link href=\"#\">Refresh</Link> • <Link href=\"#\">See all</Link>\n        </Item>\n      </FlexRow>\n      <Divider />\n      {userCountTweetArr10.map((tweet, index) => (\n        <PersonItem\n          src={tweet.profile_image_url}\n          name={tweet.screen_name}\n          count={tweet.countTweet}\n          key={index}\n          user_id={tweet.user_id}\n        />\n      ))}\n    </FlexCol>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}