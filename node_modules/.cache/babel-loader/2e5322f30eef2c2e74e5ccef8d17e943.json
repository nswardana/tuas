{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/nanang/neo4J/tuas/web-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/nanang/neo4J/tuas/web-react/src/components/sna/UsersNetworkD3.js\",\n    _templateObject,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { Grid, Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport { ChevronLeft as ChevronLeftIcon, Menu as MenuIcon, Dashboard as DashboardIcon, Assignment as AssignmentIcon, Twitter as TwitterIcon, MoreVert as MoreVertIcon, People as PeopleIcon } from '@material-ui/icons';\nimport { Graph } from 'react-d3-graph';\nimport { useQuery, gql } from '@apollo/client';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_ALL_USER = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  {\\n    getAllUser {\\n      id\\n      username\\n      screen_name\\n    }\\n  }\\n\"])));\nexport default function UsersNetworkD3() {\n  _s();\n\n  const _useQuery = useQuery(GET_ALL_USER),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 21\n  }, this);\n  if (loading) return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 23\n  }, this);\n  console.log('data');\n  console.log(data);\n  const NodeUser = data.getAllUser.map(({\n    id,\n    username,\n    screen_name\n  }) => ({\n    id: username,\n    label: username,\n    x: Math.random() * 100,\n    y: Math.random() * 100,\n    size: 10,\n    color: '#008cc2'\n  })); // graph payload (with minimalist structure)\n\n  const dataNodeUser = {\n    nodes: NodeUser,\n    links: []\n  }; // the graph configuration, just override the ones you need\n\n  const myConfig = {\n    nodeHighlightBehavior: true,\n    node: {\n      color: 'red',\n      size: 240,\n      highlightStrokeColor: 'blue'\n    },\n    link: {\n      highlightColor: 'lightblue'\n    },\n    linkHighlightBehavior: true,\n    maxZoom: 12,\n    minZoom: 0.05,\n    panAndZoom: false,\n    staticGraph: false,\n    collapsible: true,\n    focusZoom: 4\n  };\n\n  const onClickNode = function onClickNode(nodeId) {\n    window.alert(\"Clicked node \".concat(nodeId));\n  };\n\n  const onClickLink = function onClickLink(source, target) {\n    window.alert(\"Clicked link between \".concat(source, \" and \").concat(target));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            avatar: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              component: \"div\",\n              style: {\n                color: '#12939A'\n              },\n              children: \"# Users Network\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this),\n            action: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"settings\",\n              children: /*#__PURE__*/_jsxDEV(MoreVertIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Graph, {\n            id: \"graph-id\" // id is mandatory\n            ,\n            data: dataNodeUser,\n            config: myConfig,\n            onClickNode: onClickNode,\n            onClickLink: onClickLink\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), \";\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UsersNetworkD3, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = UsersNetworkD3;\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersNetworkD3\");","map":{"version":3,"sources":["/Users/nanang/neo4J/tuas/web-react/src/components/sna/UsersNetworkD3.js"],"names":["React","useTheme","Grid","Paper","makeStyles","clsx","Avatar","Typography","Card","CardContent","CardHeader","IconButton","ChevronLeft","ChevronLeftIcon","Menu","MenuIcon","Dashboard","DashboardIcon","Assignment","AssignmentIcon","Twitter","TwitterIcon","MoreVert","MoreVertIcon","People","PeopleIcon","Graph","useQuery","gql","CircularProgress","GET_ALL_USER","UsersNetworkD3","loading","error","data","console","log","NodeUser","getAllUser","map","id","username","screen_name","label","x","Math","random","y","size","color","dataNodeUser","nodes","links","myConfig","nodeHighlightBehavior","node","highlightStrokeColor","link","highlightColor","linkHighlightBehavior","maxZoom","minZoom","panAndZoom","staticGraph","collapsible","focusZoom","onClickNode","nodeId","window","alert","onClickLink","source","target"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useTheme } from '@material-ui/core/styles'\nimport { Grid, Paper } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\n\nimport Avatar from '@material-ui/core/Avatar'\nimport Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport IconButton from '@material-ui/core/IconButton'\n\nimport {\n  ChevronLeft as ChevronLeftIcon,\n  Menu as MenuIcon,\n  Dashboard as DashboardIcon,\n  Assignment as AssignmentIcon,\n  Twitter as TwitterIcon,\n  MoreVert as MoreVertIcon,\n  People as PeopleIcon,\n} from '@material-ui/icons'\n\nimport { Graph } from 'react-d3-graph'\n\nimport { useQuery, gql } from '@apollo/client'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nconst GET_ALL_USER = gql`\n  {\n    getAllUser {\n      id\n      username\n      screen_name\n    }\n  }\n`\n\nexport default function UsersNetworkD3() {\n  const { loading, error, data } = useQuery(GET_ALL_USER)\n\n  if (error) return <p>Error</p>\n  if (loading) return <CircularProgress />\n\n  console.log('data')\n  console.log(data)\n\n  const NodeUser = data.getAllUser.map(({ id, username, screen_name }) => ({\n    id: username,\n    label: username,\n    x: Math.random() * 100,\n    y: Math.random() * 100,\n    size: 10,\n    color: '#008cc2',\n  }))\n  // graph payload (with minimalist structure)\n  const dataNodeUser = {\n    nodes: NodeUser,\n    links: [],\n  }\n\n  // the graph configuration, just override the ones you need\n  const myConfig = {\n    nodeHighlightBehavior: true,\n    node: {\n      color: 'red',\n      size: 240,\n      highlightStrokeColor: 'blue',\n    },\n    link: {\n      highlightColor: 'lightblue',\n    },\n    linkHighlightBehavior: true,\n    maxZoom: 12,\n    minZoom: 0.05,\n    panAndZoom: false,\n    staticGraph: false,\n    collapsible: true,\n    focusZoom: 4,\n  }\n\n  const onClickNode = function (nodeId) {\n    window.alert(`Clicked node ${nodeId}`)\n  }\n\n  const onClickLink = function (source, target) {\n    window.alert(`Clicked link between ${source} and ${target}`)\n  }\n\n  return (\n    <React.Fragment>\n      {/* TwitterUser */}\n      <Grid container spacing={4}>\n        <Grid item xs={12}>\n          <Card>\n            <CardHeader\n              avatar={\n                <Typography\n                  variant=\"h5\"\n                  component=\"div\"\n                  style={{ color: '#12939A' }}\n                >\n                  # Users Network\n                </Typography>\n              }\n              action={\n                <IconButton aria-label=\"settings\">\n                  <MoreVertIcon />\n                </IconButton>\n              }\n            />\n            <Graph\n              id=\"graph-id\" // id is mandatory\n              data={dataNodeUser}\n              config={myConfig}\n              onClickNode={onClickNode}\n              onClickLink={onClickLink}\n            />\n            ;\n          </Card>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}