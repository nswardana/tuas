{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/nanang/neo4J/tuas/web-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/nanang/neo4J/tuas/web-react/src/components/sna/UsersTweetNetworkSigma.js\",\n    _templateObject,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { Grid, Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport Graph from 'graphology';\nimport { Sigma, SigmaContainer, RandomizeNodePositions, RelativeSize, ZoomControl, DragNodes, NOverlap, LoadJSON, ForceAtlas2 } from 'react-sigma';\nimport ForceLink from 'react-sigma/lib/ForceLink';\nimport ZoomButtons from './ZoomButtons';\nimport { ChevronLeft as ChevronLeftIcon, Menu as MenuIcon, Dashboard as DashboardIcon, Assignment as AssignmentIcon, Twitter as TwitterIcon, MoreVert as MoreVertIcon, People as PeopleIcon } from '@material-ui/icons';\nimport { useQuery, useLazyQuery, gql } from '@apollo/client';\nimport Title from './Title';\nimport moment from 'moment';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nconst GET_ALL_USER_TWEET = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  {\\n    getUserAndTweet {\\n      user_id\\n      username\\n      screen_name\\n      tweet_id\\n      tweet\\n      type_rel\\n      node_start\\n      node_end\\n    }\\n  }\\n\"])));\nimport userIcon from './icons/user.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UsersTweetNetwork() {\n  _s();\n\n  var userEmail = '';\n  const user = useQuery(GET_ALL_USER_TWEET);\n  const errors = user.error;\n  const loading = user.loading;\n  if (errors) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 22\n  }, this);\n  if (loading) return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 23\n  }, this);\n  console.log('data');\n  console.log(user.data);\n  let graphData = {\n    nodes: [],\n    edges: []\n  };\n  const userArr = user.data.getUserAndTweet.map(({\n    user_id,\n    username,\n    screen_name,\n    name,\n    tweet_id,\n    tweet,\n    node_start,\n    node_end,\n    type_rel,\n    index\n  }) => graphData.nodes.push({\n    id: user_id,\n    label: username,\n    x: 40 * Math.random(),\n    y: 40 * Math.random(),\n    size: 15,\n    color: '#48bf53',\n    borderColor: '#FF3333'\n  }));\n  user.data.getUserAndTweet.map(({\n    user_id,\n    username,\n    screen_name,\n    name,\n    tweet_id,\n    tweet,\n    node_start,\n    node_end,\n    type_rel,\n    index\n  }) => graphData.nodes.push({\n    id: tweet_id,\n    label: tweet,\n    x: 40 * Math.random(),\n    y: 40 * Math.random(),\n    size: 8,\n    color: '#F37413',\n    borderColor: '#FF3333'\n  }));\n  user.data.getUserAndTweet.map(({\n    user_id,\n    username,\n    screen_name,\n    name,\n    tweet_id,\n    tweet,\n    node_start,\n    node_end,\n    type_rel,\n    index\n  }) => graphData.edges.push({\n    id: Math.random(),\n    source: node_start,\n    target: node_end,\n    size: 3,\n    color: '#ff0000',\n    neighborsOf: 'n' + (Math.random() * 2 | 0),\n    nodesBy: 'n' + (Math.random() * 2 | 0),\n    type: 'dotted'\n  }));\n  console.log('graphData');\n  console.log(graphData);\n  Sigma.bind('overNode outNode clickNode doubleClickNode rightClickNode', function (e) {\n    alert('');\n    console.log(e.type, e.data.node.label, e.data.captor);\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 9,\n        children: /*#__PURE__*/_jsxDEV(Sigma, {\n          renderer: \"canvas\",\n          settings: {\n            batchEdgesDrawing: true,\n            defaultLabelColor: '#777',\n            defaultLabelSize: 20,\n            defaultNodeColor: '#3388AA',\n            drawEdgeLabels: false,\n            drawEdges: true,\n            hoverFontStyle: 'text-size: 11',\n            labelThreshold: 12,\n            animationsTime: 6000,\n            drawLabels: true\n          },\n          style: {\n            height: '400px',\n            maxWidth: '800px',\n            background: '#0333'\n          },\n          graph: graphData,\n          children: [/*#__PURE__*/_jsxDEV(RelativeSize, {\n            initialSize: 15\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DragNodes, {\n            onDrag: function noRefCheck() {},\n            onDragend: function noRefCheck() {},\n            onDrop: function noRefCheck() {},\n            onStartdrag: function noRefCheck() {}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ForceAtlas2, {\n            timeout: 2000,\n            worker: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [\"\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(ZoomButtons, {\n              style: {\n                margin: '0px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UsersTweetNetwork, \"t4SKIfNuj9NKxuQNWif8p+Lg3/o=\", false, function () {\n  return [useQuery];\n});\n\n_c = UsersTweetNetwork;\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersTweetNetwork\");","map":{"version":3,"sources":["/Users/nanang/neo4J/tuas/web-react/src/components/sna/UsersTweetNetworkSigma.js"],"names":["React","useEffect","useState","useTheme","Grid","Paper","makeStyles","clsx","Avatar","Typography","Card","CardContent","CardHeader","IconButton","Table","TableBody","TableCell","TableHead","TableRow","Button","Graph","Sigma","SigmaContainer","RandomizeNodePositions","RelativeSize","ZoomControl","DragNodes","NOverlap","LoadJSON","ForceAtlas2","ForceLink","ZoomButtons","ChevronLeft","ChevronLeftIcon","Menu","MenuIcon","Dashboard","DashboardIcon","Assignment","AssignmentIcon","Twitter","TwitterIcon","MoreVert","MoreVertIcon","People","PeopleIcon","useQuery","useLazyQuery","gql","Title","moment","CircularProgress","GET_ALL_USER_TWEET","userIcon","UsersTweetNetwork","userEmail","user","errors","error","loading","console","log","data","graphData","nodes","edges","userArr","getUserAndTweet","map","user_id","username","screen_name","name","tweet_id","tweet","node_start","node_end","type_rel","index","push","id","label","x","Math","random","y","size","color","borderColor","source","target","neighborsOf","nodesBy","type","bind","e","alert","node","captor","batchEdgesDrawing","defaultLabelColor","defaultLabelSize","defaultNodeColor","drawEdgeLabels","drawEdges","hoverFontStyle","labelThreshold","animationsTime","drawLabels","height","maxWidth","background","noRefCheck","margin"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useEffect, useState } from 'react'\nimport { useTheme } from '@material-ui/core/styles'\nimport { Grid, Paper } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\n\nimport Avatar from '@material-ui/core/Avatar'\nimport Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport IconButton from '@material-ui/core/IconButton'\n\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Button from '@material-ui/core/Button'\n\nimport Graph from 'graphology'\nimport {\n  Sigma,\n  SigmaContainer,\n  RandomizeNodePositions,\n  RelativeSize,\n  ZoomControl,\n  DragNodes,\n  NOverlap,\n  LoadJSON,\n  ForceAtlas2,\n} from 'react-sigma'\n\nimport ForceLink from 'react-sigma/lib/ForceLink'\nimport ZoomButtons from './ZoomButtons'\n\nimport {\n  ChevronLeft as ChevronLeftIcon,\n  Menu as MenuIcon,\n  Dashboard as DashboardIcon,\n  Assignment as AssignmentIcon,\n  Twitter as TwitterIcon,\n  MoreVert as MoreVertIcon,\n  People as PeopleIcon,\n} from '@material-ui/icons'\n\nimport { useQuery, useLazyQuery, gql } from '@apollo/client'\nimport Title from './Title'\nimport moment from 'moment'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nconst GET_ALL_USER_TWEET = gql`\n  {\n    getUserAndTweet {\n      user_id\n      username\n      screen_name\n      tweet_id\n      tweet\n      type_rel\n      node_start\n      node_end\n    }\n  }\n`\n\nimport userIcon from './icons/user.png'\n\nexport default function UsersTweetNetwork() {\n  var userEmail = ''\n  const user = useQuery(GET_ALL_USER_TWEET)\n\n  const errors = user.error\n  const loading = user.loading\n\n  if (errors) return <p>Error</p>\n  if (loading) return <CircularProgress />\n\n  console.log('data')\n  console.log(user.data)\n\n  let graphData = {\n    nodes: [],\n    edges: [],\n  }\n\n  const userArr = user.data.getUserAndTweet.map(\n    ({\n      user_id,\n      username,\n      screen_name,\n      name,\n      tweet_id,\n      tweet,\n      node_start,\n      node_end,\n      type_rel,\n      index,\n    }) =>\n      graphData.nodes.push({\n        id: user_id,\n        label: username,\n        x: 40 * Math.random(),\n        y: 40 * Math.random(),\n        size: 15,\n        color: '#48bf53',\n        borderColor: '#FF3333',\n      })\n  )\n\n  user.data.getUserAndTweet.map(\n    ({\n      user_id,\n      username,\n      screen_name,\n      name,\n      tweet_id,\n      tweet,\n      node_start,\n      node_end,\n      type_rel,\n      index,\n    }) =>\n      graphData.nodes.push({\n        id: tweet_id,\n        label: tweet,\n        x: 40 * Math.random(),\n        y: 40 * Math.random(),\n        size: 8,\n        color: '#F37413',\n        borderColor: '#FF3333',\n      })\n  )\n\n  user.data.getUserAndTweet.map(\n    ({\n      user_id,\n      username,\n      screen_name,\n      name,\n      tweet_id,\n      tweet,\n      node_start,\n      node_end,\n      type_rel,\n      index,\n    }) =>\n      graphData.edges.push({\n        id: Math.random(),\n        source: node_start,\n        target: node_end,\n        size: 3,\n        color: '#ff0000',\n        neighborsOf: 'n' + ((Math.random() * 2) | 0),\n        nodesBy: 'n' + ((Math.random() * 2) | 0),\n        type: 'dotted',\n      })\n  )\n\n  console.log('graphData')\n  console.log(graphData)\n\n  Sigma.bind(\n    'overNode outNode clickNode doubleClickNode rightClickNode',\n    function (e) {\n      alert('')\n      console.log(e.type, e.data.node.label, e.data.captor)\n    }\n  )\n\n  return (\n    <React.Fragment>\n      {/* TwitterUser */}\n      <Grid container spacing={4}>\n        <Grid item xs={9}>\n          <Sigma\n            renderer=\"canvas\"\n            settings={{\n              batchEdgesDrawing: true,\n              defaultLabelColor: '#777',\n              defaultLabelSize: 20,\n              defaultNodeColor: '#3388AA',\n              drawEdgeLabels: false,\n              drawEdges: true,\n              hoverFontStyle: 'text-size: 11',\n              labelThreshold: 12,\n              animationsTime: 6000,\n              drawLabels: true,\n            }}\n            style={{\n              height: '400px',\n              maxWidth: '800px',\n              background: '#0333',\n            }}\n            graph={graphData}\n          >\n            <RelativeSize initialSize={15} />\n\n            <DragNodes\n              onDrag={function noRefCheck() {}}\n              onDragend={function noRefCheck() {}}\n              onDrop={function noRefCheck() {}}\n              onStartdrag={function noRefCheck() {}}\n            />\n            <ForceAtlas2 timeout={2000} worker />\n\n            <Grid item xs={6}>\n              &nbsp;&nbsp;\n              <ZoomButtons\n                style={{\n                  margin: '0px',\n                }}\n              />\n            </Grid>\n          </Sigma>\n        </Grid>\n        <Grid item xs={3}></Grid>\n      </Grid>\n    </React.Fragment>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}