{"ast":null,"code":"var _jsxFileName = \"/Users/nanang/neo4J/tuas/web-react/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport typeDefs from './typeDefs';\nimport registerServiceWorker from './registerServiceWorker';\nimport { ApolloClient, ApolloLink, ApolloProvider, HttpLink, InMemoryCache } from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_URI || '/graphql',\n  cache: new InMemoryCache(),\n  typeDefs\n});\n/*\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: ApolloLink.from([\n    new HttpLink({ uri: process.env.REACT_APP_GRAPHQL_URI || '/graphql' }),\n    onError(({ graphQLErrors, networkError }) => {\n      if (networkError) {\n        console.log(`[Network error Apollo ]: ${networkError}`)\n      }\n      if (graphQLErrors) {\n        graphQLErrors.forEach(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        )\n      }\n    }),\n  ]),\n})\n*/\n\nconst Main = () => /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 43,\n  columnNumber: 3\n}, this);\n\n_c = Main;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 48,\n  columnNumber: 17\n}, this), document.getElementById('root'));\nregisterServiceWorker();\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/nanang/neo4J/tuas/web-react/src/index.js"],"names":["React","ReactDOM","App","typeDefs","registerServiceWorker","ApolloClient","ApolloLink","ApolloProvider","HttpLink","InMemoryCache","onError","client","uri","process","env","REACT_APP_GRAPHQL_URI","cache","Main","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AAEA,SACEC,YADF,EAEEC,UAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,aALF,QAMO,gBANP;AAOA,SAASC,OAAT,QAAwB,2BAAxB;;AAEA,MAAMC,MAAM,GAAG,IAAIN,YAAJ,CAAiB;AAC9BO,EAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,IAAqC,UADZ;AAE9BC,EAAAA,KAAK,EAAE,IAAIP,aAAJ,EAFuB;AAG9BN,EAAAA;AAH8B,CAAjB,CAAf;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMc,IAAI,GAAG,mBACX,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEN,MAAxB;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF;;KAAMM,I;AAMNhB,QAAQ,CAACiB,MAAT,eAAgB,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA0BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B;AACAhB,qBAAqB","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport typeDefs from './typeDefs'\nimport registerServiceWorker from './registerServiceWorker'\n\nimport {\n  ApolloClient,\n  ApolloLink,\n  ApolloProvider,\n  HttpLink,\n  InMemoryCache,\n} from '@apollo/client'\nimport { onError } from '@apollo/client/link/error'\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_URI || '/graphql',\n  cache: new InMemoryCache(),\n  typeDefs,\n})\n/*\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: ApolloLink.from([\n    new HttpLink({ uri: process.env.REACT_APP_GRAPHQL_URI || '/graphql' }),\n    onError(({ graphQLErrors, networkError }) => {\n      if (networkError) {\n        console.log(`[Network error Apollo ]: ${networkError}`)\n      }\n      if (graphQLErrors) {\n        graphQLErrors.forEach(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        )\n      }\n    }),\n  ]),\n})\n*/\nconst Main = () => (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n)\n\nReactDOM.render(<Main />, document.getElementById('root'))\nregisterServiceWorker()\n"]},"metadata":{},"sourceType":"module"}