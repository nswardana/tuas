{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/nanang/neo4J/tuas/web-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/nanang/neo4J/tuas/web-react/src/components/ProjectListComponent.js\",\n    _templateObject,\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport { useQuery, gql } from '@apollo/client';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport Title from './Title';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport moment from 'moment';\nimport { SelectedProjectContext } from './GlobalParams';\n/*\nconst GET_PROJECTS = gql`\n  {\n    getAllProject {\n      project_id\n      title\n      socialmedia\n      keywords\n      project_type\n      status\n    }\n  }\n`\n*/\n\nexport const GET_PROJECTS = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query getProjectByMode($project_type: String) {\\n    projects(where: { project_type: $project_type }) {\\n      project_id\\n      title\\n      socialmedia\\n      keywords\\n      project_type\\n      fromDate\\n      toDate\\n      status\\n    }\\n  }\\n\"])));\nimport Typography from '@material-ui/core/Typography';\nimport { ChevronLeft as ChevronLeftIcon, Menu as MenuIcon, Dashboard as DashboardIcon, Assignment as AssignmentIcon, Twitter as TwitterIcon, MoreVert as MoreVertIcon, FormatQuote as FormatQuoteIcon, TableChart as TableChartIcon, Close as CloseIcon, CropRotate as CropRotateIcon } from '@material-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProjectListComponent() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const location = useLocation();\n  const history = useHistory();\n  var pathname = location.pathname;\n  console.log('pathname');\n  console.log(pathname);\n  var project_mode = 'REQUEST';\n  if (pathname == '/projectautomatic') project_mode = 'AUTOMATIC';\n  console.log('project_mode');\n  console.log(project_mode);\n\n  const _useQuery = useQuery(GET_PROJECTS, {\n    variables: {\n      project_type: project_mode\n    }\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 21\n  }, this);\n  if (loading) return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 23\n  }, this);\n\n  function createProjectState() {\n    history.push('/createproject');\n  }\n\n  function ShowButtonStatus(Status) {\n    const varStatus = Status;\n    if (varStatus == 'ON GOING') return /*#__PURE__*/_jsxDEV(Button, {\n      startIcon: /*#__PURE__*/_jsxDEV(CropRotateIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 22\n      }, this),\n      size: \"small\",\n      variant: \"outlined\",\n      style: {\n        background: '#4caf50',\n        color: '#FFFFFF'\n      },\n      children: varStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this);else if (varStatus == 'CLOSED') return /*#__PURE__*/_jsxDEV(Button, {\n      startIcon: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 22\n      }, this),\n      size: \"small\",\n      variant: \"outlined\",\n      style: {\n        background: '#ef5350',\n        color: '#FFFFFF'\n      },\n      children: varStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this);else return /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      children: varStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this);\n  }\n\n  function selectRowProject(project) {\n    console.log(project);\n    setProjectIdProvider(project);\n    history.push('/overview');\n  }\n\n  function setProjectIdProvider(project) {\n    return /*#__PURE__*/_jsxDEV(SelectedProjectContext.Provider, {\n      value: project\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  }\n\n  function ShowButtonCreateProject() {\n    _s();\n\n    const location = useLocation();\n    var pathname = location.pathname;\n    console.log('pathname');\n    console.log(pathname);\n    if (pathname == '/project') return /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      size: \"small\",\n      color: \"secondary\",\n      startIcon: /*#__PURE__*/_jsxDEV(AssignmentIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 22\n      }, this),\n      onClick: createProjectState,\n      children: \"Create New Analytic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this);\n  }\n\n  _s(ShowButtonCreateProject, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n    return [useLocation];\n  });\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        avatar: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"div\",\n          style: {\n            color: '#12939A'\n          },\n          children: [/*#__PURE__*/_jsxDEV(TableChartIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), \" List of Projects\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this),\n        action: ShowButtonCreateProject(),\n        style: {\n          background: '#ECEFF1'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          size: \"small\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Project Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Media Social\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Keywords\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Mode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: data.projects.map((project, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n              onClick: () => selectRowProject(project),\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: project.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: [/*#__PURE__*/_jsxDEV(TwitterIcon, {\n                  style: {\n                    color: '#4DD0E1'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 21\n                }, this), \"Twitter\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: project.keywords\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: [moment(project.fromDate).format('DD/MM/YYYY'), \" -\", moment(project.toDate).format('DD/MM/YYYY')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: project.project_type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: ShowButtonStatus(project.status)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ProjectListComponent, \"fAwF0nUC9Xry2wULrGBsX1i3poc=\", false, function () {\n  return [useLocation, useHistory, useQuery];\n});\n\n_c = ProjectListComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectListComponent\");","map":{"version":3,"sources":["/Users/nanang/neo4J/tuas/web-react/src/components/ProjectListComponent.js"],"names":["React","Table","TableBody","TableCell","TableHead","TableRow","CircularProgress","Button","useQuery","gql","useHistory","useLocation","Title","Card","CardContent","CardHeader","IconButton","moment","SelectedProjectContext","GET_PROJECTS","Typography","ChevronLeft","ChevronLeftIcon","Menu","MenuIcon","Dashboard","DashboardIcon","Assignment","AssignmentIcon","Twitter","TwitterIcon","MoreVert","MoreVertIcon","FormatQuote","FormatQuoteIcon","TableChart","TableChartIcon","Close","CloseIcon","CropRotate","CropRotateIcon","ProjectListComponent","location","history","pathname","console","log","project_mode","variables","project_type","loading","error","data","createProjectState","push","ShowButtonStatus","Status","varStatus","background","color","selectRowProject","project","setProjectIdProvider","ShowButtonCreateProject","projects","map","index","title","keywords","fromDate","format","toDate","status"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport Button from '@material-ui/core/Button'\nimport { useQuery, gql } from '@apollo/client'\nimport { useHistory, useLocation } from 'react-router-dom'\n\nimport Title from './Title'\n\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport IconButton from '@material-ui/core/IconButton'\nimport moment from 'moment'\nimport { SelectedProjectContext } from './GlobalParams'\n/*\nconst GET_PROJECTS = gql`\n  {\n    getAllProject {\n      project_id\n      title\n      socialmedia\n      keywords\n      project_type\n      status\n    }\n  }\n`\n*/\n\nexport const GET_PROJECTS = gql`\n  query getProjectByMode($project_type: String) {\n    projects(where: { project_type: $project_type }) {\n      project_id\n      title\n      socialmedia\n      keywords\n      project_type\n      fromDate\n      toDate\n      status\n    }\n  }\n`\n\nimport Typography from '@material-ui/core/Typography'\nimport {\n  ChevronLeft as ChevronLeftIcon,\n  Menu as MenuIcon,\n  Dashboard as DashboardIcon,\n  Assignment as AssignmentIcon,\n  Twitter as TwitterIcon,\n  MoreVert as MoreVertIcon,\n  FormatQuote as FormatQuoteIcon,\n  TableChart as TableChartIcon,\n  Close as CloseIcon,\n  CropRotate as CropRotateIcon,\n} from '@material-ui/icons'\n\nexport default function ProjectListComponent() {\n  const location = useLocation()\n  const history = useHistory()\n  var pathname = location.pathname\n\n  console.log('pathname')\n  console.log(pathname)\n\n  var project_mode = 'REQUEST'\n  if (pathname == '/projectautomatic') project_mode = 'AUTOMATIC'\n\n  console.log('project_mode')\n  console.log(project_mode)\n\n  const { loading, error, data } = useQuery(GET_PROJECTS, {\n    variables: { project_type: project_mode },\n  })\n\n  if (error) return <p>Error</p>\n  if (loading) return <CircularProgress />\n\n  function createProjectState() {\n    history.push('/createproject')\n  }\n\n  function ShowButtonStatus(Status) {\n    const varStatus = Status\n    if (varStatus == 'ON GOING')\n      return (\n        <Button\n          startIcon={<CropRotateIcon />}\n          size=\"small\"\n          variant=\"outlined\"\n          style={{ background: '#4caf50', color: '#FFFFFF' }}\n        >\n          {varStatus}\n        </Button>\n      )\n    else if (varStatus == 'CLOSED')\n      return (\n        <Button\n          startIcon={<CloseIcon />}\n          size=\"small\"\n          variant=\"outlined\"\n          style={{ background: '#ef5350', color: '#FFFFFF' }}\n        >\n          {varStatus}\n        </Button>\n      )\n    else return <Button variant=\"outlined\">{varStatus}</Button>\n  }\n\n  function selectRowProject(project) {\n    console.log(project)\n    setProjectIdProvider(project)\n    history.push('/overview')\n  }\n\n  function setProjectIdProvider(project) {\n    return (\n      <SelectedProjectContext.Provider\n        value={project}\n      ></SelectedProjectContext.Provider>\n    )\n  }\n\n  function ShowButtonCreateProject() {\n    const location = useLocation()\n    var pathname = location.pathname\n    console.log('pathname')\n    console.log(pathname)\n\n    if (pathname == '/project')\n      return (\n        <Button\n          variant=\"contained\"\n          size=\"small\"\n          color=\"secondary\"\n          startIcon={<AssignmentIcon />}\n          onClick={createProjectState}\n        >\n          Create New Analytic\n        </Button>\n      )\n  }\n\n  return (\n    <React.Fragment>\n      <Card>\n        <CardHeader\n          avatar={\n            <Typography\n              variant=\"h6\"\n              component=\"div\"\n              style={{ color: '#12939A' }}\n            >\n              <TableChartIcon /> List of Projects\n            </Typography>\n          }\n          action={ShowButtonCreateProject()}\n          style={{ background: '#ECEFF1' }}\n        />\n        <CardContent>\n          <Table size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Project Name</TableCell>\n                <TableCell>Media Social</TableCell>\n                <TableCell>Keywords</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Mode</TableCell>\n                <TableCell>Status</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.projects.map((project, index) => (\n                <TableRow key={index} onClick={() => selectRowProject(project)}>\n                  <TableCell>{project.title}</TableCell>\n                  <TableCell>\n                    <TwitterIcon style={{ color: '#4DD0E1' }} />\n                    Twitter\n                  </TableCell>\n                  <TableCell>{project.keywords}</TableCell>\n                  <TableCell>\n                    {moment(project.fromDate).format('DD/MM/YYYY')} -\n                    {moment(project.toDate).format('DD/MM/YYYY')}\n                  </TableCell>\n                  <TableCell>{project.project_type}</TableCell>\n                  <TableCell>{ShowButtonStatus(project.status)}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </React.Fragment>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}