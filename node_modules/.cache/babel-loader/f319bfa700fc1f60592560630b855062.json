{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/nanang/neo4J/tuas/web-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/nanang/neo4J/tuas/web-react/src/components/sna/user/TwitterUserDetailContent.js\",\n    _templateObject,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { Grid, Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport TwitterUserDetail from './TwitterUserDetail';\nimport TwitterUserOfCommunity from './TwitterUserOfCommunity';\nimport UserCommunityNetwork from './UserCommunityNetwork';\nimport ChartTimeLine from '../ChartTimeLine';\nimport { useQuery, useLazyQuery, gql } from '@apollo/client';\nimport { useParams } from 'react-router-dom';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GET_PROFILE_USERS = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query getUserById($user_id: BigInt) {\\n    users(where: { user_id: $user_id }) {\\n      community_id\\n      user_id\\n      screen_name\\n      name\\n      description\\n      profile_image_url\\n      followers_count\\n      following_count\\n      pagerank_score\\n      total_neutral_sentiment\\n      total_positive_sentiment\\n      total_negative_sentiment\\n    }\\n  }\\n\"])));\nexport default function TwitterUserDetailContent() {\n  _s();\n\n  const _useParams = useParams(),\n        id = _useParams.id;\n\n  const _useQuery = useQuery(GET_PROFILE_USERS, {\n    variables: {\n      user_id: id\n    }\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 21\n  }, this);\n  if (loading) return /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 23\n  }, this);\n  var dataUser = data.users[0];\n  console.log('data id : ' + id);\n  console.log(dataUser);\n  console.log('community_id');\n  const community_id = dataUser.community_id;\n  console.log(community_id);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        children: [/*#__PURE__*/_jsxDEV(TwitterUserDetail, {\n          dataUser: dataUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TwitterUserOfCommunity, {\n          community_id: community_id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 8,\n        children: community_id !== 'null' ? /*#__PURE__*/_jsxDEV(UserCommunityNetwork, {\n          community_id: community_id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this) : 'Community is empty'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TwitterUserDetailContent, \"ewfendcS3PSa2ath3oPz+m0pI8Y=\", false, function () {\n  return [useParams, useQuery];\n});\n\n_c = TwitterUserDetailContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TwitterUserDetailContent\");","map":{"version":3,"sources":["/Users/nanang/neo4J/tuas/web-react/src/components/sna/user/TwitterUserDetailContent.js"],"names":["React","useTheme","Grid","Paper","makeStyles","clsx","TwitterUserDetail","TwitterUserOfCommunity","UserCommunityNetwork","ChartTimeLine","useQuery","useLazyQuery","gql","useParams","CircularProgress","GET_PROFILE_USERS","TwitterUserDetailContent","id","variables","user_id","loading","error","data","dataUser","users","console","log","community_id"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,mBAA5B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AAEA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,GAAjC,QAA4C,gBAA5C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;;AAEA,OAAO,MAAMC,iBAAiB,GAAGH,GAAH,wbAAvB;AAmBP,eAAe,SAASI,wBAAT,GAAoC;AAAA;;AAAA,qBAClCH,SAAS,EADyB;AAAA,QACzCI,EADyC,cACzCA,EADyC;;AAAA,oBAEhBP,QAAQ,CAACK,iBAAD,EAAoB;AAC3DG,IAAAA,SAAS,EAAE;AAAEC,MAAAA,OAAO,EAAEF;AAAX;AADgD,GAApB,CAFQ;AAAA,QAEzCG,OAFyC,aAEzCA,OAFyC;AAAA,QAEhCC,KAFgC,aAEhCA,KAFgC;AAAA,QAEzBC,IAFyB,aAEzBA,IAFyB;;AAMjD,MAAID,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAID,OAAJ,EAAa,oBAAO,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AAEb,MAAIG,QAAQ,GAAGD,IAAI,CAACE,KAAL,CAAW,CAAX,CAAf;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAeT,EAA3B;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,QAAMC,YAAY,GAAGJ,QAAQ,CAACI,YAA9B;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AAEA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BAEE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,gCACE,QAAC,iBAAD;AAAmB,UAAA,QAAQ,EAAEJ;AAA7B;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,sBAAD;AAAwB,UAAA,YAAY,EAAEI;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,kBACGA,YAAY,KAAK,MAAjB,gBACC,QAAC,oBAAD;AAAsB,UAAA,YAAY,EAAEA;AAApC;AAAA;AAAA;AAAA;AAAA,gBADD,GAGC;AAJJ;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GApCuBX,wB;UACPH,S,EACkBH,Q;;;KAFXM,wB","sourcesContent":["import React from 'react'\nimport { useTheme } from '@material-ui/core/styles'\nimport { Grid, Paper } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport clsx from 'clsx'\nimport TwitterUserDetail from './TwitterUserDetail'\nimport TwitterUserOfCommunity from './TwitterUserOfCommunity'\nimport UserCommunityNetwork from './UserCommunityNetwork'\nimport ChartTimeLine from '../ChartTimeLine'\n\nimport { useQuery, useLazyQuery, gql } from '@apollo/client'\nimport { useParams } from 'react-router-dom'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nexport const GET_PROFILE_USERS = gql`\n  query getUserById($user_id: BigInt) {\n    users(where: { user_id: $user_id }) {\n      community_id\n      user_id\n      screen_name\n      name\n      description\n      profile_image_url\n      followers_count\n      following_count\n      pagerank_score\n      total_neutral_sentiment\n      total_positive_sentiment\n      total_negative_sentiment\n    }\n  }\n`\n\nexport default function TwitterUserDetailContent() {\n  const { id } = useParams()\n  const { loading, error, data } = useQuery(GET_PROFILE_USERS, {\n    variables: { user_id: id },\n  })\n\n  if (error) return <p>Error</p>\n  if (loading) return <CircularProgress />\n\n  var dataUser = data.users[0]\n\n  console.log('data id : ' + id)\n  console.log(dataUser)\n  console.log('community_id')\n  const community_id = dataUser.community_id\n  console.log(community_id)\n\n  return (\n    <React.Fragment>\n      {/* TwitterUser */}\n      <Grid container spacing={2}>\n        <Grid item xs={4}>\n          <TwitterUserDetail dataUser={dataUser} />\n          <br></br>\n          <TwitterUserOfCommunity community_id={community_id} />\n        </Grid>\n        <Grid item xs={8}>\n          {community_id !== 'null' ? (\n            <UserCommunityNetwork community_id={community_id} />\n          ) : (\n            'Community is empty'\n          )}\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}