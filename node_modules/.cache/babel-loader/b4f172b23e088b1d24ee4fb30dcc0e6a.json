{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"elementType\", \"externalSlotProps\", \"ownerState\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport appendOwnerState from './appendOwnerState';\nimport mergeSlotProps from './mergeSlotProps';\nimport resolveComponentProps from './resolveComponentProps';\n/**\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\n\nexport default function useSlotProps(parameters) {\n  var _parameters$additiona;\n\n  const elementType = parameters.elementType,\n        externalSlotProps = parameters.externalSlotProps,\n        ownerState = parameters.ownerState,\n        rest = _objectWithoutPropertiesLoose(parameters, _excluded);\n\n  const resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);\n\n  const _mergeSlotProps = mergeSlotProps(_extends({}, rest, {\n    externalSlotProps: resolvedComponentsProps\n  })),\n        mergedProps = _mergeSlotProps.props,\n        internalRef = _mergeSlotProps.internalRef;\n\n  const ref = useForkRef(internalRef, useForkRef(resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref));\n  const props = appendOwnerState(elementType, _extends({}, mergedProps, {\n    ref\n  }), ownerState);\n  return props;\n}","map":{"version":3,"sources":["/Users/nanang/neo4J/tuas/web-react/node_modules/@mui/base/utils/useSlotProps.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","unstable_useForkRef","useForkRef","appendOwnerState","mergeSlotProps","resolveComponentProps","useSlotProps","parameters","_parameters$additiona","elementType","externalSlotProps","ownerState","rest","resolvedComponentsProps","mergedProps","props","internalRef","ref","additionalProps"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,MAAMC,SAAS,GAAG,CAAC,aAAD,EAAgB,mBAAhB,EAAqC,YAArC,CAAlB;AACA,SAASC,mBAAmB,IAAIC,UAAhC,QAAkD,YAAlD;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;AAC/C,MAAIC,qBAAJ;;AAD+C,QAI7CC,WAJ6C,GAO3CF,UAP2C,CAI7CE,WAJ6C;AAAA,QAK7CC,iBAL6C,GAO3CH,UAP2C,CAK7CG,iBAL6C;AAAA,QAM7CC,UAN6C,GAO3CJ,UAP2C,CAM7CI,UAN6C;AAAA,QAQzCC,IARyC,GAQlCb,6BAA6B,CAACQ,UAAD,EAAaP,SAAb,CARK;;AAU/C,QAAMa,uBAAuB,GAAGR,qBAAqB,CAACK,iBAAD,EAAoBC,UAApB,CAArD;;AAV+C,0BAc3CP,cAAc,CAACN,QAAQ,CAAC,EAAD,EAAKc,IAAL,EAAW;AACpCF,IAAAA,iBAAiB,EAAEG;AADiB,GAAX,CAAT,CAd6B;AAAA,QAYtCC,WAZsC,mBAY7CC,KAZ6C;AAAA,QAa7CC,WAb6C,mBAa7CA,WAb6C;;AAiB/C,QAAMC,GAAG,GAAGf,UAAU,CAACc,WAAD,EAAcd,UAAU,CAACW,uBAAuB,IAAI,IAA3B,GAAkC,KAAK,CAAvC,GAA2CA,uBAAuB,CAACI,GAApE,EAAyE,CAACT,qBAAqB,GAAGD,UAAU,CAACW,eAApC,KAAwD,IAAxD,GAA+D,KAAK,CAApE,GAAwEV,qBAAqB,CAACS,GAAvK,CAAxB,CAAtB;AACA,QAAMF,KAAK,GAAGZ,gBAAgB,CAACM,WAAD,EAAcX,QAAQ,CAAC,EAAD,EAAKgB,WAAL,EAAkB;AACpEG,IAAAA;AADoE,GAAlB,CAAtB,EAE1BN,UAF0B,CAA9B;AAGA,SAAOI,KAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"elementType\", \"externalSlotProps\", \"ownerState\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport appendOwnerState from './appendOwnerState';\nimport mergeSlotProps from './mergeSlotProps';\nimport resolveComponentProps from './resolveComponentProps';\n\n/**\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\nexport default function useSlotProps(parameters) {\n  var _parameters$additiona;\n\n  const {\n    elementType,\n    externalSlotProps,\n    ownerState\n  } = parameters,\n        rest = _objectWithoutPropertiesLoose(parameters, _excluded);\n\n  const resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps(_extends({}, rest, {\n    externalSlotProps: resolvedComponentsProps\n  }));\n  const ref = useForkRef(internalRef, useForkRef(resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref));\n  const props = appendOwnerState(elementType, _extends({}, mergedProps, {\n    ref\n  }), ownerState);\n  return props;\n}"]},"metadata":{},"sourceType":"module"}